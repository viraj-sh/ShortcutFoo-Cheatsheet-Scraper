[
  {
    "name": "Attributes",
    "commands": [
      {
        "key": ".addClass",
        "description": "Adds the specified class(es) to each of the set of matched elements"
      },
      {
        "key": ".attr",
        "description": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element"
      },
      {
        "key": ".hasClass",
        "description": "Determine whether any of the matched elements are assigned the given class"
      },
      {
        "key": ".html",
        "description": "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element"
      },
      {
        "key": ".prop",
        "description": "Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element"
      },
      {
        "key": ".removeAttr",
        "description": "Remove an attribute from each element in the set of matched elements"
      },
      {
        "key": ".removeClass",
        "description": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements"
      },
      {
        "key": ".removeProp",
        "description": "Remove a property for the set of matched elements"
      },
      {
        "key": ".toggleClass",
        "description": "Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the switch argument"
      },
      {
        "key": ".val",
        "description": "Get the current value of the first element in the set of matched elements or set the value of every matched element"
      }
    ]
  },
  {
    "name": "Effects I",
    "commands": [
      {
        "key": ".animate",
        "description": "Perform a custom animation of a set of CSS properties"
      },
      {
        "key": ".fadeIn",
        "description": "Display the matched elements by fading them to opaque"
      },
      {
        "key": ".fadeOut",
        "description": "Hide the matched elements by fading them to transparent"
      },
      {
        "key": ".fadeTo",
        "description": "Adjust the opacity of the matched elements"
      },
      {
        "key": ".fadeToggle",
        "description": "Display or hide the matched elements by animating their opacity"
      },
      {
        "key": ".hide",
        "description": "Hide the matched elements"
      },
      {
        "key": ".show",
        "description": "Display the matched elements"
      },
      {
        "key": ".slideDown",
        "description": "Display the matched elements with a sliding motion"
      },
      {
        "key": ".slideToggle",
        "description": "Display or hide the matched elements with a sliding motion"
      },
      {
        "key": ".slideUp",
        "description": "Hide the matched elements with a sliding motion"
      },
      {
        "key": ".toggle",
        "description": "Display or hide the matched elements"
      }
    ]
  },
  {
    "name": "Effects II",
    "commands": [
      {
        "key": ".clearQueue",
        "description": "Remove from the queue all items that have not yet been run"
      },
      {
        "key": ".delay",
        "description": "Set a timer to delay execution of subsequent items in the queue"
      },
      {
        "key": ".dequeue",
        "description": "Execute the next function on the queue for the matched elements"
      },
      {
        "key": ".finish",
        "description": "Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements"
      },
      {
        "key": "$.fx.interval",
        "description": "The rate (in milliseconds) at which animations fire"
      },
      {
        "key": "$.fx.off",
        "description": "Globally disable all animations"
      },
      {
        "key": ".queue",
        "description": "Show or manipulate the queue of functions to be executed on the matched elements"
      },
      {
        "key": ".stop",
        "description": "Stop the currently-running animation on the matched elements"
      }
    ]
  },
  {
    "name": "Traversing I",
    "commands": [
      {
        "key": ".add",
        "description": "Add elements to the set of matched elements"
      },
      {
        "key": ".addBack",
        "description": "Add the previous set of elements on the stack to the current set, optionally filtered by a selector"
      },
      {
        "key": ".andSelf",
        "description": "Add the previous set of elements on the stack to the current set"
      },
      {
        "key": ".children",
        "description": "Get the children of each element in the set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".closest",
        "description": "For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree"
      },
      {
        "key": ".contents",
        "description": "Get the children of each element in the set of matched elements, including text and comment nodes"
      },
      {
        "key": ".each",
        "description": "Iterate over a jQuery object, executing a function for each matched element"
      },
      {
        "key": ".end",
        "description": "End the most recent filtering operation in the current chain and return the set of matched elements to its previous state"
      },
      {
        "key": ".eq",
        "description": "Reduce the set of matched elements to the one at the specified index"
      },
      {
        "key": ".filter",
        "description": "Reduce the set of matched elements to those that match the selector or pass the function\u2019s test"
      },
      {
        "key": ".find",
        "description": "Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element."
      },
      {
        "key": ".first",
        "description": "Reduce the set of matched elements to the first in the set"
      },
      {
        "key": ".has",
        "description": "Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element"
      },
      {
        "key": ".is",
        "description": "Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments"
      },
      {
        "key": ".last",
        "description": "Reduce the set of matched elements to the final one in the set"
      }
    ]
  },
  {
    "name": "Traversing II",
    "commands": [
      {
        "key": ".map",
        "description": "Pass each element in the current matched set through a function, producing a new jQuery object containing the return values"
      },
      {
        "key": ".next",
        "description": "Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector"
      },
      {
        "key": ".nextAll",
        "description": "Get all following siblings of each element in the set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".nextUntil",
        "description": "Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed"
      },
      {
        "key": ".not",
        "description": "Remove elements from the set of matched elements"
      },
      {
        "key": ".offsetParent",
        "description": "Get the closest ancestor element that is positioned"
      },
      {
        "key": ".parent",
        "description": "Get the parent of each element in the current set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".parents",
        "description": "Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector."
      },
      {
        "key": ".parentsUntil",
        "description": "Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object"
      },
      {
        "key": ".prev",
        "description": "Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".prevAll",
        "description": "Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".prevUntil",
        "description": "Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object"
      },
      {
        "key": ".siblings",
        "description": "Get the siblings of each element in the set of matched elements, optionally filtered by a selector"
      },
      {
        "key": ".slice",
        "description": "Reduce the set of matched elements to a subset specified by a range of indices"
      }
    ]
  },
  {
    "name": "Selectors I",
    "commands": [
      {
        "key": "\"*\"",
        "description": "Selects all elements"
      },
      {
        "key": ":animated",
        "description": "Select all elements that are in the progress of an animation at the time the selector is run"
      },
      {
        "key": "name|=\"value\"",
        "description": "Attribute contains prefix selector"
      },
      {
        "key": "name*=\"value\"",
        "description": "Attribute contains selector"
      },
      {
        "key": "name`=\"value\"",
        "description": "Attribute contains word selector"
      },
      {
        "key": "name$=\"value\"",
        "description": "Attribute ends with selector"
      },
      {
        "key": "name=\"value\"",
        "description": "Attribute equals selector"
      },
      {
        "key": "name!=\"value\"",
        "description": "Attribute not equal selector"
      },
      {
        "key": "name^=\"value\"",
        "description": "Attribute starts with selector"
      },
      {
        "key": ":button",
        "description": "Selects all button elements and elements of type button"
      },
      {
        "key": ":checkbox",
        "description": "Selects all elements of type checkbox"
      },
      {
        "key": ":checked",
        "description": "Matches all elements that are checked or selected"
      },
      {
        "key": "\"parent>child\"",
        "description": "Child selector"
      },
      {
        "key": "\".class\"",
        "description": "Class selector"
      },
      {
        "key": ":contains",
        "description": "Select all elements that contain the specified text"
      },
      {
        "key": "\"ancestordescendant\"",
        "description": "Selects all elements that are descendants of a given ancestor"
      },
      {
        "key": ":disabled",
        "description": "Selects all elements that are disabled"
      },
      {
        "key": "\"element\"",
        "description": "Element selector"
      },
      {
        "key": ":empty",
        "description": "Select all elements that have no children (including text nodes)"
      },
      {
        "key": ":enabled",
        "description": "Selects all elements that are enabled"
      }
    ]
  },
  {
    "name": "Selectors II",
    "commands": [
      {
        "key": ":eq",
        "description": "Select the element at index n within the matched set"
      },
      {
        "key": ":even",
        "description": "Selects even elements, zero-indexed. See also odd"
      },
      {
        "key": ":file",
        "description": "Selects all elements of type file"
      },
      {
        "key": ":first-child",
        "description": "Selects all elements that are the first child of their parent"
      },
      {
        "key": ":first-of-type",
        "description": "Selects all elements that are the first among siblings of the same element name"
      },
      {
        "key": ":first",
        "description": "Selects the first matched element"
      },
      {
        "key": ":focus",
        "description": "Selects element if it is currently focused"
      },
      {
        "key": ":gt",
        "description": "Select all elements at an index greater than index within the matched set"
      },
      {
        "key": ":has",
        "description": "Selects elements which contain at least one element that matches the specified selector"
      },
      {
        "key": ":header",
        "description": "Selects all elements that are headers, like h1, h2, h3 and so on"
      },
      {
        "key": ":hidden",
        "description": "Selects all elements that are hidden"
      },
      {
        "key": "\"#id\"",
        "description": "Selects a single element with the given id attribute"
      },
      {
        "key": ":image",
        "description": "Selects all elements of type image"
      },
      {
        "key": ":input",
        "description": "Selects all input, textarea, select and button elements"
      },
      {
        "key": "[name]",
        "description": "Has Attribute Selector"
      },
      {
        "key": ":lang",
        "description": "Selects all elements of the specified language"
      },
      {
        "key": ":last-child",
        "description": "Selects all elements that are the last child of their parent"
      },
      {
        "key": ":last-of-type",
        "description": "Selects all elements that are the last among siblings of the same element name"
      },
      {
        "key": ":last",
        "description": "Selects the last matched element"
      },
      {
        "key": ":it",
        "description": "Select all elements at an index less than index within the matched set"
      }
    ]
  },
  {
    "name": "Selectors III",
    "commands": [
      {
        "key": "name=\"value\",name2=\"Value2\"",
        "description": "Multiple attribute selector"
      },
      {
        "key": "\"selector1,selector2,selectorN\"",
        "description": "Multiple Selectors"
      },
      {
        "key": "\"prev+next\"",
        "description": "Next adjacent selector"
      },
      {
        "key": "\"prev`siblings\"",
        "description": "Next siblings selector"
      },
      {
        "key": ":not",
        "description": "Selects all elements that do not match the given selector"
      },
      {
        "key": ":nth-child",
        "description": "Selects all elements that are the nth-child of their parent"
      },
      {
        "key": ":nth-last-of-type",
        "description": "Selects all elements that are the nth-child of their parent, counting from the last element to the first"
      },
      {
        "key": ":nth-of-type",
        "description": "Selects all elements that are the nth child of their parent in relation to siblings with the same element name"
      },
      {
        "key": ":odd",
        "description": "Selects odd elements, zero-indexed. See also even"
      },
      {
        "key": ":only-child",
        "description": "Selects all elements that are the only child of their parent"
      },
      {
        "key": ":only-of-type",
        "description": "Selects all elements that have no siblings with the same element name"
      },
      {
        "key": ":parent",
        "description": "Select all elements that have at least one child node (either an element or text"
      },
      {
        "key": ":password",
        "description": "Selects all elements of type password"
      },
      {
        "key": ":radio",
        "description": "Selects all elements of type radio"
      },
      {
        "key": ":reset",
        "description": "Selects all elements of type reset"
      },
      {
        "key": ":root",
        "description": "Selects the element that is the root of the document"
      },
      {
        "key": ":selected",
        "description": "Selects all elements that are selected"
      },
      {
        "key": ":submit",
        "description": "Selects all elements of type submit"
      },
      {
        "key": ":target",
        "description": "Selects the target element indicated by the fragment identifier of the document\u2019s URI"
      },
      {
        "key": ":text",
        "description": "Selects all elements of type text"
      },
      {
        "key": ":visible",
        "description": "Selects all elements that are visible"
      }
    ]
  },
  {
    "name": "Ajax",
    "commands": [
      {
        "key": ".ajaxComplete",
        "description": "Register a handler to be called when Ajax requests complete"
      },
      {
        "key": ".ajaxError",
        "description": "Register a handler to be called when Ajax requests complete with an error."
      },
      {
        "key": ".ajaxSend",
        "description": "Attach a function to be executed before an Ajax request is sent"
      },
      {
        "key": ".ajaxStart",
        "description": "Register a handler to be called when the first Ajax request begins"
      },
      {
        "key": ".ajaxStop",
        "description": "Register a handler to be called when all Ajax requests have completed"
      },
      {
        "key": ".ajaxSuccess",
        "description": "Attach a function to be executed whenever an Ajax request completes successfully"
      },
      {
        "key": "$.ajax",
        "description": "Perform an asynchronous HTTP (Ajax) request"
      },
      {
        "key": "$.ajaxPrefilter",
        "description": "Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()"
      },
      {
        "key": "$.ajaxSetup",
        "description": "Set default values for future Ajax requests. Its use is not recommended"
      },
      {
        "key": "$.ajaxTransport",
        "description": "Creates an object that handles the actual transmission of Ajax data"
      },
      {
        "key": "$.get",
        "description": "Load data from the server using a HTTP GET request"
      },
      {
        "key": "$.getJSON",
        "description": "Load JSON-encoded data from the server using a GET HTTP request"
      },
      {
        "key": "$.getScript",
        "description": "Load a JavaScript file from the server using a GET HTTP request, then execute it"
      },
      {
        "key": "$.post",
        "description": "Load data from the server using a HTTP POST request"
      },
      {
        "key": ".load",
        "description": "Load data from the server and place the returned HTML into the matched element"
      }
    ]
  },
  {
    "name": "Properties",
    "commands": [
      {
        "key": ".context",
        "description": "The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document"
      },
      {
        "key": ".jquery",
        "description": "A string containing the jQuery version number"
      },
      {
        "key": "$.browser",
        "description": "Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead"
      },
      {
        "key": "$.support",
        "description": "A collection of properties that represent the presence of different browser features or bugs"
      },
      {
        "key": ".length",
        "description": "The number of elements in the jQuery object"
      },
      {
        "key": ".selector",
        "description": "A selector representing selector passed to jQuery(), if any, when creating the original set"
      }
    ]
  },
  {
    "name": "Manipulation I",
    "commands": [
      {
        "key": ".after",
        "description": "Insert content, specified by the parameter, after each element in the set of matched elements"
      },
      {
        "key": ".append",
        "description": "Insert content, specified by the parameter, to the end of each element in the set of matched elements"
      },
      {
        "key": ".before",
        "description": "Insert content, specified by the parameter, before each element in the set of matched elements"
      },
      {
        "key": ".clone",
        "description": "Create a deep copy of the set of matched elements"
      },
      {
        "key": ".css",
        "description": "Get the value of a style property for the first element in the set of matched elements or set one or more CSS properties for every matched element"
      },
      {
        "key": ".empty",
        "description": "Remove all child nodes of the set of matched elements from the DOM"
      },
      {
        "key": ".height",
        "description": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element"
      },
      {
        "key": ".innerHeight",
        "description": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element"
      },
      {
        "key": ".innerWidth",
        "description": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element"
      },
      {
        "key": ".insertAfter",
        "description": "Insert every element in the set of matched elements after the target"
      },
      {
        "key": ".insertBefore",
        "description": "Insert every element in the set of matched elements before the target"
      },
      {
        "key": ".outerHeight",
        "description": "Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without \u201cpx\u201d) representation of the value or null if called on an empty set of elements"
      }
    ]
  },
  {
    "name": "Manipulation II",
    "commands": [
      {
        "key": ".outerWidth",
        "description": "Get the current computed width for the first element in the set of matched elements, including padding and border"
      },
      {
        "key": ".prepend",
        "description": "Insert content, specified by the parameter, to the beginning of each element in the set of matched elements"
      },
      {
        "key": ".prependTo",
        "description": "Insert every element in the set of matched elements to the beginning of the target"
      },
      {
        "key": ".remove",
        "description": "Remove the set of matched elements from the DOM"
      },
      {
        "key": ".replaceAll",
        "description": "Replace each target element with the set of matched elements"
      },
      {
        "key": ".replaceWith",
        "description": "Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed"
      },
      {
        "key": ".scrollLeft",
        "description": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element"
      },
      {
        "key": ".text",
        "description": "Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements"
      },
      {
        "key": ".unwrap",
        "description": "Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place"
      },
      {
        "key": ".width",
        "description": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element"
      },
      {
        "key": ".wrap",
        "description": "Wrap an HTML structure around each element in the set of matched elements"
      },
      {
        "key": ".wrapAll",
        "description": "Wrap an HTML structure around all elements in the set of matched elements"
      },
      {
        "key": ".wrapInner",
        "description": "Wrap an HTML structure around the content of each element in the set of matched elements"
      }
    ]
  },
  {
    "name": "Events I",
    "commands": [
      {
        "key": ".bind",
        "description": "Attach a handler to an event for the elements"
      },
      {
        "key": ".click",
        "description": "Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".dblclick",
        "description": "Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".delegate",
        "description": "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements"
      },
      {
        "key": ".die",
        "description": "Remove event handlers previously attached using .live() from the elements"
      },
      {
        "key": ".error",
        "description": "Bind an event handler to the \u201cerror\u201d JavaScript event"
      },
      {
        "key": "event.currentTarget",
        "description": "The current DOM element within the event bubbling phase"
      },
      {
        "key": "event.data",
        "description": "An optional object of data passed to an event method when the current executing handler is bound"
      },
      {
        "key": "event.delegateTarget",
        "description": "The element where the currently-called jQuery event handler was attached"
      },
      {
        "key": "event.isDefaultPrevented",
        "description": "Returns whether event.preventDefault() was ever called on this event object"
      },
      {
        "key": "event.isImmediatePropagationStopped",
        "description": "Returns whether event.stopImmediatePropagation() was ever called on this event object"
      },
      {
        "key": "event.isPropagationStopped",
        "description": "Returns whether event.stopPropagation() was ever called on this event object"
      },
      {
        "key": "event.metaKey",
        "description": "Indicates whether the META key was pressed when the event fired"
      },
      {
        "key": "event.namespace",
        "description": "The namespace specified when the event was triggered"
      },
      {
        "key": "event.pageX",
        "description": "The mouse position relative to the left edge of the document"
      },
      {
        "key": "event.pageY",
        "description": "The mouse position relative to the top edge of the document"
      },
      {
        "key": "event.preventDefault",
        "description": "If this method is called, the default action of the event will not be triggered"
      },
      {
        "key": "event.relatedTarget",
        "description": "The other DOM element involved in the event, if any"
      }
    ]
  },
  {
    "name": "Events II",
    "commands": [
      {
        "key": "event.result",
        "description": "The last value returned by an event handler that was triggered by this event, unless the value was undefined"
      },
      {
        "key": "event.stopImmediatePropagation",
        "description": "Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree"
      },
      {
        "key": "event.stopPropagation",
        "description": "Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event"
      },
      {
        "key": "event.target",
        "description": "The DOM element that initiated the event"
      },
      {
        "key": "event.timeStamp",
        "description": "The difference in milliseconds between the time the browser created the event and January 1, 1970"
      },
      {
        "key": "event.type",
        "description": "Describes the nature of the event"
      },
      {
        "key": "event.which",
        "description": "For key or mouse events, this property indicates the specific key or button that was pressed"
      },
      {
        "key": ".focusin",
        "description": "Bind an event handler to the \u201cfocusin\u201d event"
      },
      {
        "key": ".focusout",
        "description": "Bind an event handler to the \u201cfocusout\u201d JavaScript event"
      },
      {
        "key": ".hover",
        "description": "Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements"
      },
      {
        "key": ".keydown",
        "description": "Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".keypress",
        "description": "Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".keyup",
        "description": "Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".live",
        "description": "Attach an event handler for all elements which match the current selector, now and in the future"
      },
      {
        "key": ".load",
        "description": "Bind an event handler to the \u201cload\u201d JavaScript event"
      },
      {
        "key": ".mousedown",
        "description": "Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".mouseenter",
        "description": "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element"
      },
      {
        "key": ".mouseleave",
        "description": "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element"
      }
    ]
  },
  {
    "name": "Events III",
    "commands": [
      {
        "key": ".mousemove",
        "description": "Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".mouseout",
        "description": "Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".mouseover",
        "description": "Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".mouseup",
        "description": "Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".off",
        "description": "Remove an event handler"
      },
      {
        "key": ".on",
        "description": "Attach an event handler function for one or more events to the selected elements"
      },
      {
        "key": ".one",
        "description": "Attach a handler to an event for the elements. The handler is executed at most once per element per event type"
      },
      {
        "key": ".ready",
        "description": "Specify a function to execute when the DOM is fully loaded"
      },
      {
        "key": ".resize",
        "description": "Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".scroll",
        "description": "Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".toggle",
        "description": "Bind two or more handlers to the matched elements, to be executed on alternate clicks"
      },
      {
        "key": ".trigger",
        "description": "Execute all handlers and behaviors attached to the matched elements for the given event type"
      },
      {
        "key": ".triggerHandler",
        "description": "Execute all handlers attached to an element for an event"
      },
      {
        "key": ".unbind",
        "description": "Remove a previously-attached event handler from the elements"
      },
      {
        "key": ".undelegate",
        "description": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements"
      },
      {
        "key": ".unload",
        "description": "Bind an event handler to the \u201cunload\u201d JavaScript event"
      }
    ]
  },
  {
    "name": "Forms",
    "commands": [
      {
        "key": ".blur",
        "description": "Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".change",
        "description": "Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".focus",
        "description": "Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".select",
        "description": "Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element"
      },
      {
        "key": ".serialize",
        "description": "Encode a set of form elements as a string for submission"
      },
      {
        "key": ".serializeArray",
        "description": "Encode a set of form elements as an array of names and values"
      },
      {
        "key": ".submit",
        "description": "Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element"
      }
    ]
  },
  {
    "name": "Utilities I",
    "commands": [
      {
        "key": "$.contains",
        "description": "Check to see if a DOM element is a descendant of another DOM element"
      },
      {
        "key": "$.data",
        "description": "Store arbitrary data associated with the specified element and/or return the value that was set"
      },
      {
        "key": "$.dequeue",
        "description": "Execute the next function on the queue for the matched element"
      },
      {
        "key": "$.each",
        "description": "Iterator function used to iterate over both objects or arrays"
      },
      {
        "key": "$.extend",
        "description": "Merge the contents of two or more objects together into the first object"
      },
      {
        "key": "$.fn.extend",
        "description": "Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods"
      },
      {
        "key": "$.globalEval",
        "description": "Execute some JavaScript code globally"
      },
      {
        "key": "$.grep",
        "description": "Finds the elements of an array which satisfy a filter function. The original array is not affected"
      },
      {
        "key": "$.inArray",
        "description": "Search for a specified value within an array and return its index (or -1 if not found)"
      },
      {
        "key": "$.isArray",
        "description": "Determine whether the argument is an array"
      },
      {
        "key": "$.isEmptyObject",
        "description": "Check to see if an object is empty (contains no enumerable properties)"
      },
      {
        "key": "$.isFunction",
        "description": "Determine if the argument passed is a Javascript function object"
      },
      {
        "key": "$.isNumeric",
        "description": "Determines whether its argument is a number"
      },
      {
        "key": "$.isPlainObject",
        "description": "Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d)"
      },
      {
        "key": "$.isWindow",
        "description": "Determine whether the argument is a window"
      }
    ]
  },
  {
    "name": "Utilities II",
    "commands": [
      {
        "key": "$.isXMLDoc",
        "description": "Check to see if a DOM node is within an XML document (or is an XML document)"
      },
      {
        "key": "$.makeArray",
        "description": "Convert an array-like object into a true JavaScript array"
      },
      {
        "key": "$.map",
        "description": "Translate all items in an array or object to new array of items"
      },
      {
        "key": "$.merge",
        "description": "Merge the contents of two arrays together into the first array"
      },
      {
        "key": "$.noop",
        "description": "An empty function"
      },
      {
        "key": "$.now",
        "description": "Return a number representing the current time"
      },
      {
        "key": "$.parseHTML",
        "description": "Parses a string into an array of DOM nodes"
      },
      {
        "key": "$.parseJSON",
        "description": "Takes a well-formed JSON string and returns the resulting JavaScript object"
      },
      {
        "key": "$.parseXML",
        "description": "Parses a string into an XML document"
      },
      {
        "key": "$.proxy",
        "description": "Takes a function and returns a new one that will always have a particular context"
      },
      {
        "key": "$.queue",
        "description": "Show or manipulate the queue of functions to be executed on the matched element"
      },
      {
        "key": "$.removeData",
        "description": "Remove a previously-stored piece of data"
      },
      {
        "key": "$.trim",
        "description": "Remove the whitespace from the beginning and end of a string"
      },
      {
        "key": "$.type",
        "description": "Determine the internal JavaScript [[Class]] of an object"
      },
      {
        "key": "$.unique",
        "description": "Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers"
      }
    ]
  },
  {
    "name": "Deferred Objects",
    "commands": [
      {
        "key": "deferred.always",
        "description": "Add handlers to be called when the Deferred object is either resolved or rejected"
      },
      {
        "key": "deferred.done",
        "description": "Add handlers to be called when the Deferred object is resolved"
      },
      {
        "key": "deferred.fail",
        "description": "Add handlers to be called when the Deferred object is rejected"
      },
      {
        "key": "deferred.isRejected",
        "description": "Determine whether a Deferred object has been rejected"
      },
      {
        "key": "deferred.isResolved",
        "description": "Determine whether a Deferred object has been resolved"
      },
      {
        "key": "deferred.notify",
        "description": "Call the progressCallbacks on a Deferred object with the given args"
      },
      {
        "key": "deferred.notifyWith",
        "description": "Call the progressCallbacks on a Deferred object with the given context and args"
      },
      {
        "key": "deferred.pipe",
        "description": "Utility method to filter and/or chain Deferreds"
      },
      {
        "key": "deferred.progress",
        "description": "Add handlers to be called when the Deferred object generates progress notifications"
      },
      {
        "key": "deferred.promise",
        "description": "Return a Deferred\u2019s Promise object"
      },
      {
        "key": "deferred.reject",
        "description": "Reject a Deferred object and call any failCallbacks with the given args"
      },
      {
        "key": "deferred.rejectWith",
        "description": "Reject a Deferred object and call any failCallbacks with the given context and args"
      },
      {
        "key": "deferred.resolve",
        "description": "Resolve a Deferred object and call any doneCallbacks with the given args"
      },
      {
        "key": "deferred.resolveWith",
        "description": "Resolve a Deferred object and call any doneCallbacks with the given context and args"
      },
      {
        "key": "deferred.state",
        "description": "Determine the current state of a Deferred object"
      },
      {
        "key": "deferred.then",
        "description": "Add handlers to be called when the Deferred object is resolved, rejected, or still in progress"
      },
      {
        "key": "$.Deferred",
        "description": "A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function"
      },
      {
        "key": "$.when",
        "description": "Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events"
      },
      {
        "key": ".promise",
        "description": "Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished"
      }
    ]
  },
  {
    "name": "Callbacks Object",
    "commands": [
      {
        "key": "callbacks.add",
        "description": "Add a callback or a collection of callbacks to a callback list"
      },
      {
        "key": "callbacks.disable",
        "description": "Disable a callback list from doing anything more"
      },
      {
        "key": "callbacks.disabled",
        "description": "Determine if the callbacks list has been disabled"
      },
      {
        "key": "callbacks.empty",
        "description": "Remove all of the callbacks from a list"
      },
      {
        "key": "callbacks.fire",
        "description": "Call all of the callbacks with the given arguments"
      },
      {
        "key": "callbacks.fired",
        "description": "Determine if the callbacks have already been called at least once"
      },
      {
        "key": "callbacks.fireWith",
        "description": "Call all callbacks in a list with the given context and arguments"
      },
      {
        "key": "callbacks.has",
        "description": "Determine whether a supplied callback is in a list"
      },
      {
        "key": "callbacks.lock",
        "description": "Lock a callback list in its current state"
      },
      {
        "key": "callbacks.locked",
        "description": "Determine if the callbacks list has been locked"
      },
      {
        "key": "callbacks.remove",
        "description": "Remove a callback or a collection of callbacks from a callback list"
      },
      {
        "key": "$.Callbacks",
        "description": "A multi-purpose callbacks list object that provides a powerful way to manage callback lists"
      }
    ]
  },
  {
    "name": "Miscellaneous",
    "commands": [
      {
        "key": "$.holdReady",
        "description": "Holds or releases the execution of jQuery\u2019s ready event"
      },
      {
        "key": "$()",
        "description": "Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string"
      },
      {
        "key": "$.sub",
        "description": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object"
      },
      {
        "key": "$.cssHooks",
        "description": "Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties"
      },
      {
        "key": "$.hasData",
        "description": "Determine whether an element has any jQuery data associated with it"
      },
      {
        "key": "$.queue",
        "description": "Show or manipulate the queue of functions to be executed on the matched element."
      },
      {
        "key": "$.error",
        "description": "Takes a string and throws an exception containing it"
      },
      {
        "key": ".pushStack",
        "description": "Add a collection of DOM elements onto the jQuery stack"
      },
      {
        "key": ".data",
        "description": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements"
      },
      {
        "key": ".get",
        "description": "Retrieve the DOM elements matched by the jQuery object"
      },
      {
        "key": ".index",
        "description": "Search for a given element from among the matched elements"
      },
      {
        "key": "$.noConflict",
        "description": "Relinquish jQuery\u2019s control of the $ variable"
      },
      {
        "key": "$.param",
        "description": "Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request"
      },
      {
        "key": ".size",
        "description": "Return the number of elements in the jQuery object"
      },
      {
        "key": ".toArray",
        "description": "Retrieve all the elements contained in the jQuery set, as an array"
      },
      {
        "key": ".offset",
        "description": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document"
      },
      {
        "key": ".position",
        "description": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent"
      },
      {
        "key": ".scrollLeft",
        "description": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element."
      },
      {
        "key": ".scrollTop",
        "description": "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element"
      }
    ]
  }
]