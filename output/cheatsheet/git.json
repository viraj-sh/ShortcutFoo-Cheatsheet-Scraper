[
  {
    "name": "Git Basics",
    "commands": [
      {
        "key": "gitinit",
        "description": "Initialize a repository"
      },
      {
        "key": "gitstatus",
        "description": "Show status of working tree"
      },
      {
        "key": "gitaddfile.txt",
        "description": "Start tracking file.txt"
      },
      {
        "key": "gitaddmain.txt",
        "description": "Stage modified file main.txt"
      },
      {
        "key": "gitdiff",
        "description": "Show what's changed but not yet staged"
      },
      {
        "key": "gitcommit",
        "description": "Commit changes"
      },
      {
        "key": "gitcommit-a",
        "description": "Stage files and commit"
      },
      {
        "key": "gitmvmain.txtfile.txt",
        "description": "Rename main.txt to file.txt"
      },
      {
        "key": "gitfetchdevelop",
        "description": "Pull data from remote 'develop' without merging"
      },
      {
        "key": "gitpullorigindevelop",
        "description": "Fetch and merge branch 'develop' from origin"
      },
      {
        "key": "gitcloneurl",
        "description": "Create local copy of remote repository at 'url'"
      }
    ]
  },
  {
    "name": "Branching",
    "commands": [
      {
        "key": "gitbranch",
        "description": "Show current branches"
      },
      {
        "key": "gitpushoriginmaster",
        "description": "Push master branch to origin server"
      },
      {
        "key": "gitbranch-v",
        "description": "Show last commit on all branches"
      },
      {
        "key": "gitcheckoutmaster",
        "description": "Switch to branch 'master'"
      },
      {
        "key": "gitbranchfeature1",
        "description": "Create new branch called 'feature1'"
      },
      {
        "key": "gitcheckout-bfeature2",
        "description": "Create branch 'feature2' and switch to it"
      },
      {
        "key": "gitbranch-dmybranch",
        "description": "Delete branch 'mybranch'"
      },
      {
        "key": "gitbranch--merged",
        "description": "Show branches already merged into current branch"
      },
      {
        "key": "gitbranch--no-merged",
        "description": "Show branches not yet merged into current branch"
      },
      {
        "key": "gitbranch-Dfix",
        "description": "Force delete branch 'fix' that is not yet merged"
      },
      {
        "key": "gitpushoriginfeature1",
        "description": "Push local branch 'feature1' to origin"
      },
      {
        "key": "gitpushstagingdevelop:master",
        "description": "Push develop branch to remote staging master"
      },
      {
        "key": "gitcheckout-bfix1origin/fix1",
        "description": "Create local branch 'fix1' based off origin branch"
      },
      {
        "key": "gitcheckout--trackorigin/fix2",
        "description": "Create tracking branch 'fix2' based off origin"
      },
      {
        "key": "gitpushorigin:fix2",
        "description": "Delete remote branch 'fix2' from origin"
      }
    ]
  },
  {
    "name": "Merging / Rebasing",
    "commands": [
      {
        "key": "gitmergetool",
        "description": "Use graphical merge tool"
      },
      {
        "key": "gitcommit",
        "description": "Finalize merge after resolving conflicts"
      },
      {
        "key": "gitmergefeature1",
        "description": "Merge branch 'feature1' with current branch"
      },
      {
        "key": "gitaddfile.txt",
        "description": "Mark file.txt as resolved after merge"
      },
      {
        "key": "gitrebasedevelop",
        "description": "Rebase changes made on current branch over develop"
      },
      {
        "key": "gitrebasemasterdevelop",
        "description": "Rebase master onto develop without checking it out"
      },
      {
        "key": "gitrebase--ontomaster1a1b",
        "description": "Rebase master onto branch 1b made from branch 1a"
      }
    ]
  },
  {
    "name": "Remotes",
    "commands": [
      {
        "key": "gitremote",
        "description": "Show remote servers you have configured"
      },
      {
        "key": "gitremote-v",
        "description": "Show remote servers with URL displayed"
      },
      {
        "key": "gitremoteaddmyurlurl",
        "description": "Add remote server 'url' with shortname 'myurl'"
      },
      {
        "key": "gitremoterenameserver1server2",
        "description": "Rename remote 'server1' to 'server2'"
      },
      {
        "key": "gitremotermserver1",
        "description": "Remove remote 'server1'"
      },
      {
        "key": "gitremoteshoworigin",
        "description": "Show info about remote origin"
      }
    ]
  },
  {
    "name": "Commit Logs",
    "commands": [
      {
        "key": "gitlog",
        "description": "Show commit logs"
      },
      {
        "key": "gitlog-p-2",
        "description": "Show last two commits with diffs"
      },
      {
        "key": "gitlog--stat",
        "description": "Show commit logs with stats"
      },
      {
        "key": "gitlog--pretty=oneline",
        "description": "Show commit logs one per line"
      },
      {
        "key": "gitlog--graph",
        "description": "Show commit logs with ascii graph"
      },
      {
        "key": "gitlog--since=1.week",
        "description": "Show commit log for the last week"
      },
      {
        "key": "gitblame-L10,15file.rb",
        "description": "Show prev commits for each lines 10-15 of file.rb"
      }
    ]
  },
  {
    "name": "Undo / Change History",
    "commands": [
      {
        "key": "gitrm--cachedmain.txt",
        "description": "Remove main.txt from staging but keep in working"
      },
      {
        "key": "gitcommit--amend",
        "description": "Replace last commit with whats in staging"
      },
      {
        "key": "gitcheckout--file.txt",
        "description": "Discard changes to file.txt"
      },
      {
        "key": "gitresetHEADfile.txt",
        "description": "Unstage file.txt"
      },
      {
        "key": "gitcommit--amend",
        "description": "Modify last commit message"
      },
      {
        "key": "gitrebase-iHEAD`3",
        "description": "Make changes to the last 3 commits"
      }
    ]
  },
  {
    "name": "Using Tags",
    "commands": [
      {
        "key": "gittag",
        "description": "Show available tags"
      },
      {
        "key": "gittag-av3.0",
        "description": "Create annotated tag 'v3.0'"
      },
      {
        "key": "gitshowv3.0",
        "description": "Show info for tag v3.0"
      },
      {
        "key": "gittag-sv3.0",
        "description": "Create signed tag v3.0"
      },
      {
        "key": "gittagv2.1-lw",
        "description": "Create lightweight tag v2.1"
      },
      {
        "key": "gittag-vv3.0",
        "description": "Verify signed tag v3.0"
      },
      {
        "key": "gittag-av2.28feb",
        "description": "Tag previous commit '8feb' as v2.2"
      },
      {
        "key": "gitpushoriginv2.2",
        "description": "Push tag v2.2 to origin"
      },
      {
        "key": "gitpushorigin--tags",
        "description": "Push all local tags to origin"
      }
    ]
  },
  {
    "name": "Using Stashes",
    "commands": [
      {
        "key": "gitstash",
        "description": "Stash changes without committing"
      },
      {
        "key": "gitstashlist",
        "description": "Show stores stashes"
      },
      {
        "key": "gitstashapply",
        "description": "Reapply most recent stash"
      },
      {
        "key": "gitstashapplystash@2",
        "description": "Reapply stash 2"
      },
      {
        "key": "gitstashapply--index",
        "description": "Reapply stashed changes along with staged changes"
      },
      {
        "key": "gitstashdropstash@{2}",
        "description": "Drop stash 2"
      },
      {
        "key": "gitstashpop",
        "description": "Apply most recent stash and drop from stack"
      },
      {
        "key": "gitstashbranchmybranch",
        "description": "Create branch 'mybranch' from stash"
      },
      {
        "key": "gitstashclear",
        "description": "Delete all stashes"
      },
      {
        "key": "gitdiff--staged",
        "description": "Show what's staged but not yet committed"
      },
      {
        "key": "gitdiff--check",
        "description": "Check for whitespace errors before committing"
      }
    ]
  },
  {
    "name": "Using Bisect",
    "commands": [
      {
        "key": "gitbisectstart",
        "description": "Start binary search of commits to find bad commit"
      },
      {
        "key": "gitbisectbad",
        "description": "Mark current commit as broken during bisect"
      },
      {
        "key": "gitbisectgoodv2.2",
        "description": "Mark v2.2 as last known good commit during bisect"
      },
      {
        "key": "gitbisectgood",
        "description": "Mark current commit as good during bisect"
      },
      {
        "key": "gitbisectreset",
        "description": "Reset HEAD when finished with bisect"
      },
      {
        "key": "gitbisectruntest.sh",
        "description": "Run 'test.sh' on each commit during bisect"
      }
    ]
  }
]