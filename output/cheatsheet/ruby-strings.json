[
  {
    "name": "Cases I",
    "commands": [
      {
        "key": "str.capitalize",
        "description": "Return a copy of str capitalized # \"string\" => \"String\""
      },
      {
        "key": "str.downcase",
        "description": "Return a lowercase copy of str # \"STRING\" => \"string\""
      },
      {
        "key": "str.swapcase",
        "description": "Return a swapped case copy of str # \"String\" => \"sTRING\""
      },
      {
        "key": "str.upcase",
        "description": "Return a uppercase copy of str # \"string\" => \"STRING\""
      }
    ]
  },
  {
    "name": "Search / Replace I",
    "commands": [
      {
        "key": "str.end_with?(str2)",
        "description": "Returns true if str ends with str2"
      },
      {
        "key": "str.include?(str2)",
        "description": "Return true if str includes str2"
      },
      {
        "key": "str.index(str2)",
        "description": "Return index of first occurrence of str2 in str"
      },
      {
        "key": "str.rindex(str2)",
        "description": "Return the index of the last occurrence of str2 in str"
      },
      {
        "key": "str.start_with?(str2)",
        "description": "Return true if str starts with str2"
      }
    ]
  },
  {
    "name": "Modification I",
    "commands": [
      {
        "key": "str+str2",
        "description": "Return a new string adding str2 to str # \"one\" + \"two\" => \"onetwo\""
      },
      {
        "key": "str<<str2",
        "description": "Modify str in place by appending str2 to the end"
      },
      {
        "key": "str[index]=str2",
        "description": "Replace str at index with str2"
      },
      {
        "key": "str[start,length]=str2",
        "description": "Replace str from start to length with str2"
      },
      {
        "key": "str[regexp]=str2",
        "description": "Replace str using regexp with str2"
      },
      {
        "key": "str.chomp",
        "description": "Return a new string with carriage return characters removed from str # \"hello\\r\\n\" => \"hello\""
      },
      {
        "key": "str.chop",
        "description": "Return a new string with last character removed from str # \"string\" => \"strin\""
      },
      {
        "key": "str.insert(index,str2)",
        "description": "Insert str2 before the character at the given index, modifying str"
      },
      {
        "key": "str.succ",
        "description": "Return successor to str (increment characters starting from rightmost alphachar in string) # \"abcd\" => \"abce\""
      },
      {
        "key": "str.prepend(str2)",
        "description": "Prepend str2 to str"
      },
      {
        "key": "str.reverse",
        "description": "Return a new string with the characters from str in reverse order # \"abcd\" => \"dcba\""
      }
    ]
  },
  {
    "name": "Substrings I",
    "commands": [
      {
        "key": "str*integer",
        "description": "Copy - return a new String containing integer copies of str."
      },
      {
        "key": "str[start,length]",
        "description": "Element Reference - pass a start and a length, return a substring of length characters from start"
      },
      {
        "key": "str[regexp]",
        "description": "Element Reference - pass a Regexp and return the matching portion of the str"
      },
      {
        "key": "str[range]",
        "description": "Element Reference - pass a range using beginning and end as offsets delimiting the substr to be returned"
      },
      {
        "key": "str.chars",
        "description": "Return an array of characters in str"
      },
      {
        "key": "str.chr",
        "description": "Return a one-character string at the beginning of str"
      },
      {
        "key": "str.lines",
        "description": "Return an array of lines in str"
      },
      {
        "key": "str.split(str2)",
        "description": "Return array of substrings by dividing str based on str2"
      }
    ]
  },
  {
    "name": "Whitespace I",
    "commands": [
      {
        "key": "str.center(width,padstr)",
        "description": "Center str in width padded with padstr"
      },
      {
        "key": "str.ljust(length,str2)",
        "description": "Return a new string of length with str left justified and padded with str2"
      },
      {
        "key": "str.lstrip",
        "description": "Return a copy of str with leading whitespace removed"
      },
      {
        "key": "str.lstrip!",
        "description": "Modify str with leading whitespace removed"
      },
      {
        "key": "str.rjust(length,str2)",
        "description": "Return a new string of length with str right justified and padded with str2"
      },
      {
        "key": "str.rstrip",
        "description": "Return a copy of str with trailing whitespace removed"
      },
      {
        "key": "str.rstrip!",
        "description": "Modify str by removing trailing whitespace"
      },
      {
        "key": "str.strip",
        "description": "Return a copy of str with leading and trailing whitespace removed"
      },
      {
        "key": "str.strip!",
        "description": "Modify str by removing leading and trailing whitespace"
      }
    ]
  },
  {
    "name": "Comparison I",
    "commands": [
      {
        "key": "str<=>str2",
        "description": "Compare - return -1, 0, +1 or nil depending on str is less than, eq to, or greater than str2"
      },
      {
        "key": "str==obj",
        "description": "Equality - return whether string is equal to obj"
      },
      {
        "key": "str=`obj",
        "description": "Match - if obj is a Regexp, use it as a pattern to match against str, and return the position."
      },
      {
        "key": "str.eql?(str2)",
        "description": "Return true if str is equal to str2 by length and content"
      }
    ]
  },
  {
    "name": "Conversion I",
    "commands": [
      {
        "key": "str.hash",
        "description": "Return a hash based on str's length, content, and encoding"
      },
      {
        "key": "str.hex",
        "description": "Return number of str as hexadecimal digits"
      },
      {
        "key": "str.oct",
        "description": "Return octal number of str"
      },
      {
        "key": "str.to_c",
        "description": "Convert str to complex number"
      },
      {
        "key": "str.to_f",
        "description": "Convert str to float"
      },
      {
        "key": "str.to_i",
        "description": "Convert str to integer"
      },
      {
        "key": "str.to_r",
        "description": "Convert str to rational number"
      },
      {
        "key": "str.to_sym",
        "description": "Convert str to symbol"
      }
    ]
  },
  {
    "name": "Search / Replace II",
    "commands": [
      {
        "key": "str.gsub(regexp,str2)",
        "description": "Return a copy of str with all occurrences of regexp substituted with str2"
      },
      {
        "key": "str.gsub(regexp,other_hash)",
        "description": "Return a copy of str with all occurrences of regexp substituted with values of matched keys in other_hash"
      },
      {
        "key": "str.gsub(str1,str2)",
        "description": "Return a copy of str with all occurrences of str1 replaced with str2"
      },
      {
        "key": "str.gsub!(str1,str2)",
        "description": "Modify str by replacing all occurrences of str1 with str2"
      },
      {
        "key": "str.index(regexp)",
        "description": "Return index of first occurrence of regexp in str"
      },
      {
        "key": "str.match(pattern)",
        "description": "Convert pattern to regexp and invoke its match method on str"
      },
      {
        "key": "str.partition(str2)",
        "description": "Search str2 in str and return part before it, the match, and part after in an array"
      },
      {
        "key": "str.partition(regexp)",
        "description": "Search regexp in str and return part before it, the match, and the part after it in an array"
      },
      {
        "key": "str.sub(regexp,str2)",
        "description": "Return copy of str with first occurrence of regexp replaced by str2"
      }
    ]
  },
  {
    "name": "Cases II",
    "commands": [
      {
        "key": "str.capitalize!",
        "description": "Modify str by converting the first character to uppercase and the remainder to lowercase"
      },
      {
        "key": "str.casecmp(str2)",
        "description": "Case-insensitive compare of str with str2"
      },
      {
        "key": "str.downcase!",
        "description": "Modify str by replacing all uppercase letters with lowercase letters"
      },
      {
        "key": "str.swapcase!",
        "description": "Modify str by swapping case of all characters"
      },
      {
        "key": "str.upcase!",
        "description": "Modify string by replacing lowercase characters with uppercase characters"
      }
    ]
  },
  {
    "name": "Search / Replace III",
    "commands": [
      {
        "key": "str.replace(str2)",
        "description": "Replace the contents and taintedness of str with str2"
      },
      {
        "key": "str.rpartition(str2)",
        "description": "Search str2 in str from end of str and return part before it, the match, and part after in an array"
      },
      {
        "key": "str.scan(regexp)",
        "description": "Return an array of strings matching regexp of str"
      },
      {
        "key": "str.sub!(regexp,str2)",
        "description": "Modify str by replacing first occurrence of regexp with str2"
      },
      {
        "key": "str.tr(from_str,to_str)",
        "description": "Return copy of str with characters in from_str replaced by characters in to_str"
      },
      {
        "key": "str.tr!(from_str,to_str)",
        "description": "Translate str in place by replacing from_str with to_str"
      },
      {
        "key": "str.tr_s(from_str,to_str)",
        "description": "Translate str replacing from_str with to_str then remove duplicate characters in translated regions"
      }
    ]
  },
  {
    "name": "Inspection I",
    "commands": [
      {
        "key": "str[index]",
        "description": "Element Reference - pass a single index, and return a substring of one character at that index"
      },
      {
        "key": "str.ascii_only?",
        "description": "Return true for a str which has only ASCII characters"
      },
      {
        "key": "str.count(str2)",
        "description": "Count of str2 characters in str"
      },
      {
        "key": "str.empty?",
        "description": "Return true if str has a length of zero"
      },
      {
        "key": "str.encoding",
        "description": "Return the encoding of str"
      },
      {
        "key": "str.inspect",
        "description": "Return a printable version of str, surrounded by quote marks, with special characters escaped"
      },
      {
        "key": "str.length",
        "description": "Return character length of str (option 1)"
      },
      {
        "key": "str.size",
        "description": "Return the character length of str (option 2)"
      },
      {
        "key": "str.sum",
        "description": "Return a basic checksum of the characters in str"
      },
      {
        "key": "str.valid_encoding?",
        "description": "Returns true if str is encoded correctly"
      }
    ]
  },
  {
    "name": "Iteration I",
    "commands": [
      {
        "key": "str.each_byte",
        "description": "Pass each byte in str to a block"
      },
      {
        "key": "str.each_char",
        "description": "Pass each character in str to a block"
      },
      {
        "key": "str.each_codepoint",
        "description": "Pass Integer ordinal of each character in str to a block"
      },
      {
        "key": "str.each_line",
        "description": "Pass each line of string to a block"
      },
      {
        "key": "str.upto(str2)",
        "description": "Iterate through successive values of str, starting at str and ending at str2 inclusive"
      }
    ]
  },
  {
    "name": "Modification II",
    "commands": [
      {
        "key": "str%arg",
        "description": "Format - use str as a format specification, and return the result of applying it to arg"
      },
      {
        "key": "str.chomp!",
        "description": "Modify str in place by removing carriage return characters from end of str"
      },
      {
        "key": "str.chop!",
        "description": "Modify str in place by removing last character"
      },
      {
        "key": "str.clear",
        "description": "Make str empty"
      },
      {
        "key": "str.delete(str2)",
        "description": "Return a copy of str with all characters of str2 deleted"
      },
      {
        "key": "str.delete!(str2)",
        "description": "Modify str by deleting all characters of str2 set"
      },
      {
        "key": "str.succ!",
        "description": "Modify str by incrementing characters starting from right most aphanumeric char (successor)"
      },
      {
        "key": "str.reverse!",
        "description": "Modify str by reversing it in place"
      },
      {
        "key": "str.scrub(char)",
        "description": "Replace invalid bytes with given replacement char"
      },
      {
        "key": "str.squeeze",
        "description": "Return copy of str where runs of the same character are replaced by a single character"
      }
    ]
  },
  {
    "name": "Conversion II",
    "commands": [
      {
        "key": "str.b",
        "description": "Return a copied string whose encoding is ASCII-8BIT"
      },
      {
        "key": "str.codepoints",
        "description": "Return an array of the Integer ordinals of the characters in str"
      },
      {
        "key": "str.crypt(str2)",
        "description": "Apply a one-way cryptographic hash to str with given salt str2"
      },
      {
        "key": "str.dump",
        "description": "Produce a version of str with all non-printing characters replace and all special characters escaped"
      },
      {
        "key": "str.encode(str2)",
        "description": "Return a copy of str transcoded to encoding str2"
      },
      {
        "key": "str.intern",
        "description": "Return symbol corresponding to str, creating the symbol if it did not previously exist"
      },
      {
        "key": "str.ord",
        "description": "Return integer ordinal of one-character string"
      },
      {
        "key": "str.unpack(str2)",
        "description": "Return array of decoded str using str2 as format"
      }
    ]
  },
  {
    "name": "Bytes I",
    "commands": [
      {
        "key": "str.bytes",
        "description": "Return an array of bytes in str"
      },
      {
        "key": "str.bytesize",
        "description": "Return the length of str in bytes"
      },
      {
        "key": "str.byteslice(index)",
        "description": "Byte Reference - return a substring of one byte at index of str"
      },
      {
        "key": "str.byteslice(start,length)",
        "description": "Byte Reference - return substring from start to length of str"
      },
      {
        "key": "str.byteslice(range)",
        "description": "Byte Reference - return substring containing bytes at offsets given by range of str"
      },
      {
        "key": "str.getbyte(index)",
        "description": "Return the indexth byte of str as an integer"
      },
      {
        "key": "str.setbyte(index,integer)",
        "description": "Modify the indexth byte as integer"
      }
    ]
  }
]