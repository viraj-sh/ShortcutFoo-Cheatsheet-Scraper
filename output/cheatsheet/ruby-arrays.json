[
  {
    "name": "Accessing Elements I",
    "commands": [
      {
        "key": "a[index]",
        "description": "Element Reference - return the element at index of array a"
      },
      {
        "key": "a[n..length]",
        "description": "Element Reference - return subarray starting at 'n' and ending at length of array a"
      },
      {
        "key": "a.fetch(index)",
        "description": "Try to return element at position index of array a, but throw IndexError if index out of bounds"
      },
      {
        "key": "a.first",
        "description": "Return first element of array a"
      },
      {
        "key": "a.index(obj)",
        "description": "Find index of first obj in a where object in a == obj (option 1)"
      },
      {
        "key": "a.last",
        "description": "Return the last element of array a"
      },
      {
        "key": "a.sample(n)",
        "description": "Chose a random element or n random elements from array a"
      }
    ]
  },
  {
    "name": "Iterating I",
    "commands": [
      {
        "key": "a.cycle(n)",
        "description": "Call given block for each element n times or forever if nil is given of array a"
      },
      {
        "key": "a.each",
        "description": "Call the given block once for each element in array a"
      },
      {
        "key": "a.each_index",
        "description": "Call the given block once for each element in a passing the index as param"
      },
      {
        "key": "a.map",
        "description": "Create a new array containing values returned by block of a (option 1)"
      },
      {
        "key": "a.reverse_each",
        "description": "Same as a.each, but traverses a in reverse order"
      }
    ]
  },
  {
    "name": "Adding Items I",
    "commands": [
      {
        "key": "a<<obj",
        "description": "Append - push obj on to the end of array a and return a"
      },
      {
        "key": "a[index]=obj",
        "description": "Element Assignment - set element at index to obj of array a"
      },
      {
        "key": "a1[start,length]=a2",
        "description": "Element Assignment - replace subarray from start to length of array a1 with a2"
      },
      {
        "key": "a1.concat(a2)",
        "description": "Appends the elements of a2 to a1"
      },
      {
        "key": "a.fill(obj)",
        "description": "Fill array a with obj"
      },
      {
        "key": "a.fill(obj,start,length)",
        "description": "Fill array a with obj from start to length"
      },
      {
        "key": "a.insert(index,obj)",
        "description": "Insert given obj before element at given index of array a"
      },
      {
        "key": "a.push(obj)",
        "description": "Append - push given obj on to end of array a"
      },
      {
        "key": "a.unshift(obj)",
        "description": "Prepend object to front of a, moving other elements upwards"
      }
    ]
  },
  {
    "name": "Removing Items I",
    "commands": [
      {
        "key": "a.clear",
        "description": "Remove all elements from a"
      },
      {
        "key": "a.compact",
        "description": "Return a copy of a with all nil elements removed"
      },
      {
        "key": "a.compact!",
        "description": "Modify array a by removing nil elements from array a"
      },
      {
        "key": "a.delete(obj)",
        "description": "Delete all items from array a that are equal to obj"
      },
      {
        "key": "a.delete_at(index)",
        "description": "Delete element at index of array a, returning that element, or nil if index is out of range"
      },
      {
        "key": "a.drop(n)",
        "description": "Drop first n elements from array a and return the rest of the elements in an array"
      },
      {
        "key": "a.pop",
        "description": "Remove the last element from array a and return it, or nil if a is empty"
      },
      {
        "key": "a.pop(n)",
        "description": "Remove and return an array of last n elements (or less) of array a"
      },
      {
        "key": "a.shift",
        "description": "Remove the first element of array a and return it (shifting all other elements down by 1)"
      }
    ]
  },
  {
    "name": "Obtaining Information I",
    "commands": [
      {
        "key": "a.any?",
        "description": "Return true if block returns a value other than false or nil of array a"
      },
      {
        "key": "a.count",
        "description": "Return the number of elements of a"
      },
      {
        "key": "a.count(obj)",
        "description": "Return the number of elements in a which equal obj"
      },
      {
        "key": "a.empty?",
        "description": "Return true if array a contains no elements"
      },
      {
        "key": "a1.eql?(a2)",
        "description": "Return true if a1 and a2 are the same object or both have same content"
      },
      {
        "key": "a.frozen?",
        "description": "Return true if array a if frozen"
      },
      {
        "key": "a.include?(obj)",
        "description": "Return true if given obj is present in array a"
      },
      {
        "key": "a.length",
        "description": "Return the number of elements in array a (may be zero)"
      },
      {
        "key": "a.size",
        "description": "Same as a.length"
      }
    ]
  },
  {
    "name": "Transforming I",
    "commands": [
      {
        "key": "a.flatten",
        "description": "Return new array that is a one-dimensional flattening of a"
      },
      {
        "key": "a.join(separator)",
        "description": "Return a string of a separated by given separator (empty string by default)"
      },
      {
        "key": "a1.replace(a2)",
        "description": "Replace contents of a1 with a2, truncating or expanding if necessary"
      },
      {
        "key": "a.reverse",
        "description": "Return a new array containing a's elements in reverse order"
      },
      {
        "key": "a.rotate(count)",
        "description": "Return a new array by rotating a so element at count if first element in new array"
      },
      {
        "key": "a.shuffle",
        "description": "Return a new array with elements of a shuffled"
      },
      {
        "key": "a.sort",
        "description": "Return a new array created by sorting array a"
      },
      {
        "key": "a.uniq",
        "description": "Return a new array by removing duplicate values of array a"
      }
    ]
  },
  {
    "name": "Selecting Items I",
    "commands": [
      {
        "key": "a.delete_if",
        "description": "Delete every element of array a which block evaluates to true"
      },
      {
        "key": "a.drop_while",
        "description": "Drop elements up to, but not including, the first element for which bock returns nil or false"
      },
      {
        "key": "a.keep_if",
        "description": "Delete every element of array a for which given block evaluates to false"
      },
      {
        "key": "a.reject",
        "description": "Return a new array containing the items in a for which the given block is not true"
      },
      {
        "key": "a.reject!",
        "description": "Equivalent to a.delete_if, deleting elements from a for which the block evaluates to true, but returns nil if no changes were made"
      },
      {
        "key": "a.select",
        "description": "Return a new array containing all elements of a for which given block returns true"
      },
      {
        "key": "a.select!",
        "description": "Same as a.keep_if, deleting every element of array a for which given block evaluates to false"
      }
    ]
  },
  {
    "name": "Mathematical Operators I",
    "commands": [
      {
        "key": "a1&a2",
        "description": "Set Intersection - return a new array containing elements common to arrays a1 and a2"
      },
      {
        "key": "a*int",
        "description": "Return a new array built by concatenating int copies of array a"
      },
      {
        "key": "a*str",
        "description": "Repetition - With string arg str, equivalent to a.join(str)"
      },
      {
        "key": "a1+a2",
        "description": "Concatenation - return a new array by concatenating a1 and a2"
      },
      {
        "key": "a1-a2",
        "description": "Difference - return a new array that is a copy of the original array a1, removing any items from array a2"
      },
      {
        "key": "a1|a2",
        "description": "Set Union - return a new array by joining a1 with a2, excluding any duplicates"
      }
    ]
  },
  {
    "name": "General I",
    "commands": [
      {
        "key": "a1<=>a2",
        "description": "Comparison - return -1, 0, or +1 if a1 is less than, equal to, or greater than a2"
      },
      {
        "key": "a1==a2",
        "description": "Equality - return true if a1 and a2 are the same length and each element is equal to corresponding element in the other array"
      },
      {
        "key": "a.hash",
        "description": "Compute a hash-code for array a"
      },
      {
        "key": "a1.initialize_copy(a2)",
        "description": "Replace contents of a1 with contents of a2, truncating or expanding if necessary"
      },
      {
        "key": "a.to_s",
        "description": "Create string representation of array a"
      },
      {
        "key": "a.to_h",
        "description": "Return hash of a treating array a as array of [key,value] pairs"
      }
    ]
  },
  {
    "name": "Accessing Elements II",
    "commands": [
      {
        "key": "a[range]",
        "description": "Element Reference - return subarray specified by range of array a"
      },
      {
        "key": "a.first(n)",
        "description": "Return first n elements of array a (option 1)"
      },
      {
        "key": "a.last(n)",
        "description": "Return the last n elements of array a"
      },
      {
        "key": "a.rindex(obj)",
        "description": "Return index of last object in a == obj"
      },
      {
        "key": "a.take(n)",
        "description": "Return first n elements from array a (option 2)"
      },
      {
        "key": "a.take_while",
        "description": "Pass elements to block until block returns nil or false, then return prior elements of a"
      },
      {
        "key": "a.values_at(i1,i2,i3)",
        "description": "Return array containing elements of array a corresponding to given indices i1, i2, and i3"
      }
    ]
  },
  {
    "name": "Transforming II",
    "commands": [
      {
        "key": "a.flatten!",
        "description": "Modify array a so that it is a one-dimensional flattening of itself"
      },
      {
        "key": "a.reverse!",
        "description": "Reverse array a in place"
      },
      {
        "key": "a.rotate!(count)",
        "description": "Rotate a in place so element at count comes first, and return a"
      },
      {
        "key": "a.shuffle!",
        "description": "Shuffle elements in a in place"
      },
      {
        "key": "a.sort!",
        "description": "Sort array a in place"
      },
      {
        "key": "a.uniq!",
        "description": "Remove duplicate elements from a"
      }
    ]
  },
  {
    "name": "Iterating II",
    "commands": [
      {
        "key": "a.collect",
        "description": "Create a new array containing values returned by block of a (option 2)"
      },
      {
        "key": "a.collect!",
        "description": "Invoke given block once for each element of a, replacing the element with the value returned by the block (option 2)"
      },
      {
        "key": "a.find_index(obj)",
        "description": "Find index of first obj in a where object in a == obj (option 2)"
      },
      {
        "key": "a.map!",
        "description": "Invoke given block once for each element of a, replacing the element with the value returned by the block (option 1)"
      }
    ]
  },
  {
    "name": "Accessing Elements III",
    "commands": [
      {
        "key": "a.assoc(obj)",
        "description": "Return first contained array of a whose first element is obj"
      },
      {
        "key": "a.bsearch",
        "description": "Find a value in array a using binary search"
      },
      {
        "key": "a.combination(n)",
        "description": "Return array containing all combinations of length n of a"
      },
      {
        "key": "a.permutation(n)",
        "description": "Yield all permutation of length n of elements of array a"
      },
      {
        "key": "a.rassoc(obj)",
        "description": "Return first contained array of a whose second element is obj"
      },
      {
        "key": "a.repeated_combination(n)",
        "description": "Yield all repeated combinations of length n of elements in array a"
      },
      {
        "key": "a.repeated_permutation(n)",
        "description": "Yield all repeated permutation of length n of elements in array a"
      }
    ]
  },
  {
    "name": "Transforming III",
    "commands": [
      {
        "key": "a.pack(aTemplateString)",
        "description": "Pack contents of a into binary sequence according to directives in aTemplateString"
      },
      {
        "key": "a1.product(a2,a3)",
        "description": "Return an array of all combinations of elements from a1, a2, and a3"
      },
      {
        "key": "a.sort_by!",
        "description": "Sort array a in place using set of keys generated by mapping values of a through given block"
      },
      {
        "key": "a.transpose",
        "description": "Transpose rows and columns of array of arrays a"
      },
      {
        "key": "a.zip",
        "description": "Convert any arguments to arrays, then merge elements of array a with corresponding elements from each arg"
      }
    ]
  }
]