[
  {
    "name": "Cases I",
    "commands": [
      {
        "key": "s.capitalize()",
        "description": "Capitalize s # 'hello' => 'Hello'"
      },
      {
        "key": "s.lower()",
        "description": "Lowercase s # 'HELLO' => 'hello'"
      },
      {
        "key": "s.swapcase()",
        "description": "Swap cases of all characters in s # 'Hello' => \"hELLO\""
      },
      {
        "key": "s.title()",
        "description": "Titlecase s # 'hello world' => 'Hello World'"
      },
      {
        "key": "s.upper()",
        "description": "Uppercase s # 'hello' => 'HELLO'"
      }
    ]
  },
  {
    "name": "Sequence Operations I",
    "commands": [
      {
        "key": "s2ins",
        "description": "Return true if s contains s2"
      },
      {
        "key": "s+s2",
        "description": "Concat s and s2"
      },
      {
        "key": "len(s)",
        "description": "Length of s"
      },
      {
        "key": "min(s)",
        "description": "Smallest character of s"
      },
      {
        "key": "max(s)",
        "description": "Largest character of s"
      }
    ]
  },
  {
    "name": "Sequence Operations II",
    "commands": [
      {
        "key": "s2notins",
        "description": "Return true if s does not contain s2"
      },
      {
        "key": "s*integer",
        "description": "Return integer copies of s concatenated # 'hello' => 'hellohellohello'"
      },
      {
        "key": "s[index]",
        "description": "Character at index of s"
      },
      {
        "key": "s[i:j:k]",
        "description": "Slice of s from i to j with step k"
      },
      {
        "key": "s.count(s2)",
        "description": "Count of s2 in s"
      }
    ]
  },
  {
    "name": "Whitespace I",
    "commands": [
      {
        "key": "s.center(width)",
        "description": "Center s with blank padding of width # 'hi' => '     hi     '"
      },
      {
        "key": "s.isspace()",
        "description": "Return true if s only contains whitespace characters"
      },
      {
        "key": "s.ljust(width)",
        "description": "Left justifiy s with total size of width # 'hello' => 'hello        '"
      },
      {
        "key": "s.rjust(width)",
        "description": "Right justify s with total size of width # 'hello' => '        hello'"
      },
      {
        "key": "s.strip()",
        "description": "Remove leading and trailing whitespace from s # '    hello    ' => 'hello'"
      }
    ]
  },
  {
    "name": "Find / Replace I",
    "commands": [
      {
        "key": "s.index(s2,i,j)",
        "description": "Index of first occurrence of s2 in s after index i and before index j"
      },
      {
        "key": "s.find(s2)",
        "description": "Find and return lowest index of s2 in s"
      },
      {
        "key": "s.index(s2)",
        "description": "Return lowest index of s2 in s (but raise ValueError if not found)"
      },
      {
        "key": "s.replace(s2,s3)",
        "description": "Replace s2 with s3 in s"
      },
      {
        "key": "s.replace(s2,s3,count)",
        "description": "Replace s2 with s3 in s at most count times"
      },
      {
        "key": "s.rfind(s2)",
        "description": "Return highest index of s2 in s"
      },
      {
        "key": "s.rindex(s2)",
        "description": "Return highest index of s2 in s (raise ValueError if not found)"
      }
    ]
  },
  {
    "name": "Cases II",
    "commands": [
      {
        "key": "s.casefold()",
        "description": "Casefold s (aggressive lowercasing for caseless matching) # '\u00dforat' => 'ssorat'"
      },
      {
        "key": "s.islower()",
        "description": "Return true if s is lowercase"
      },
      {
        "key": "s.istitle()",
        "description": "Return true if s is titlecased # 'Hello World' => true"
      },
      {
        "key": "s.isupper()",
        "description": "Return true if s is uppercase"
      }
    ]
  },
  {
    "name": "Inspection I",
    "commands": [
      {
        "key": "s.endswith(s2)",
        "description": "Return true if s ends with s2"
      },
      {
        "key": "s.isalnum()",
        "description": "Return true if s is alphanumeric"
      },
      {
        "key": "s.isalpha()",
        "description": "Return true if s is alphabetic"
      },
      {
        "key": "s.isdecimal()",
        "description": "Return true if s is decimal"
      },
      {
        "key": "s.isnumeric()",
        "description": "Return true if s is numeric"
      },
      {
        "key": "s.startswith(s2)",
        "description": "Return true is s starts with s2"
      }
    ]
  },
  {
    "name": "Splitting I",
    "commands": [
      {
        "key": "s.join('123')",
        "description": "Return s joined by iterable '123' # 'hello' => '1hello2hello3'"
      },
      {
        "key": "s.partition(sep)",
        "description": "Partition string at sep and return 3-tuple with part before, the sep itself, and part after # 'hello' => ('he', 'l', 'lo')"
      },
      {
        "key": "s.rpartition(sep)",
        "description": "Partition string at last occurrence of sep, return 3-tuple with part before, the sep, and part after # 'hello' => ('hel', 'l', 'o')"
      },
      {
        "key": "s.rsplit(sep,maxsplit)",
        "description": "Return list of s split by sep with rightmost maxsplits performed"
      },
      {
        "key": "s.split(sep,maxsplit)",
        "description": "Return list of s split by sep with leftmost maxsplits performed"
      },
      {
        "key": "s.splitlines()",
        "description": "Return a list of lines in s # 'hello\\nworld' => ['hello', 'world']"
      }
    ]
  },
  {
    "name": "Inspection II",
    "commands": [
      {
        "key": "s[i:j]",
        "description": "Slice of s from i to j"
      },
      {
        "key": "s.endswith((s1,s2,s3))",
        "description": "Return true if s ends with any of string tuple s1, s2, and s3"
      },
      {
        "key": "s.isdigit()",
        "description": "Return true if s is digit"
      },
      {
        "key": "s.isidentifier()",
        "description": "Return true if s is a valid identifier"
      },
      {
        "key": "s.isprintable()",
        "description": "Return true is s is printable"
      }
    ]
  },
  {
    "name": "Whitespace II",
    "commands": [
      {
        "key": "s.center(width,pad)",
        "description": "Center s with padding pad of width # 'hi' => 'padpadhipadpad'"
      },
      {
        "key": "s.expandtabs(integer)",
        "description": "Replace all tabs with spaces of tabsize integer # 'hello\\tworld' => 'hello      world'"
      },
      {
        "key": "s.lstrip()",
        "description": "Remove leading whitespace from s # '    hello    ' => 'hello    '"
      },
      {
        "key": "s.rstrip()",
        "description": "Remove trailing whitespace from s # '    hello    ' => '    hello'"
      },
      {
        "key": "s.zfill(width)",
        "description": "Left fill s with ASCII '0' digits with total length width # '42' => '00042'"
      }
    ]
  }
]