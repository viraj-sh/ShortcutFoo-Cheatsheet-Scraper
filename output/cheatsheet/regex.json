[
  {
    "name": "Basics",
    "commands": [
      {
        "key": "*",
        "description": "Match preceding character 0 or more times"
      },
      {
        "key": "+",
        "description": "Match preceding character 1 or more times"
      },
      {
        "key": ".",
        "description": "Match any single character"
      },
      {
        "key": "x|y",
        "description": "Match either 'x' or 'y'"
      },
      {
        "key": "\\",
        "description": "Escape a special character"
      },
      {
        "key": "b",
        "description": "The character b"
      },
      {
        "key": "abc",
        "description": "The string abc"
      }
    ]
  },
  {
    "name": "Character Classes I",
    "commands": [
      {
        "key": "\\d",
        "description": "Match a digit character"
      },
      {
        "key": "\\D",
        "description": "Match a non-digit character"
      },
      {
        "key": "\\s",
        "description": "Match a single white space character (space, tab, form feed, or line feed)"
      },
      {
        "key": "\\S",
        "description": "Match a single character other than white space"
      },
      {
        "key": "\\w",
        "description": "Match any alphanumeric character (including underscore)"
      },
      {
        "key": "\\W",
        "description": "Match any non-word character"
      }
    ]
  },
  {
    "name": "Character Classes II",
    "commands": [
      {
        "key": "[abc]",
        "description": "Match any one of the characters in the set 'abc'"
      },
      {
        "key": "[^abc]",
        "description": "Match anything not in character set 'abc'"
      },
      {
        "key": "[\\b]",
        "description": "Match a backspace"
      }
    ]
  },
  {
    "name": "Assertions",
    "commands": [
      {
        "key": "^",
        "description": "Match beginning of input"
      },
      {
        "key": "$",
        "description": "Match end of input"
      },
      {
        "key": "\\b",
        "description": "Match a word boundary"
      },
      {
        "key": "\\B",
        "description": "Match a non-word boundary"
      },
      {
        "key": "?=",
        "description": "Lookahead"
      },
      {
        "key": "?!",
        "description": "Negative lookahead"
      }
    ]
  },
  {
    "name": "Assertions II",
    "commands": [
      {
        "key": "?<=",
        "description": "Lookbehind"
      },
      {
        "key": "?<!",
        "description": "Negative lookbehind"
      },
      {
        "key": "?>",
        "description": "Once-only subexpression"
      },
      {
        "key": "?()",
        "description": "If then condition"
      },
      {
        "key": "?()|",
        "description": "If then else condition"
      },
      {
        "key": "?#",
        "description": "Comment"
      }
    ]
  },
  {
    "name": "Quantifiers",
    "commands": [
      {
        "key": "{n}",
        "description": "Match exactly n occurrences of preceding character"
      },
      {
        "key": "{n,m}",
        "description": "Match at least n and at most m occurrences of the preceding character"
      },
      {
        "key": "?",
        "description": "Match 0 or 1"
      }
    ]
  },
  {
    "name": "Special Characters I",
    "commands": [
      {
        "key": "\\cX",
        "description": "Match control character X in a string"
      },
      {
        "key": "\\n",
        "description": "Match a line feed"
      },
      {
        "key": "\\r",
        "description": "Match a carriage return"
      },
      {
        "key": "\\t",
        "description": "Match a tab"
      },
      {
        "key": "\\0",
        "description": "Match a NULL"
      }
    ]
  },
  {
    "name": "Special Characters II",
    "commands": [
      {
        "key": "\\f",
        "description": "Match a form feed"
      },
      {
        "key": "\\v",
        "description": "Match a vertical tab"
      },
      {
        "key": "\\xhh",
        "description": "Match character with code hh (2 hex digits)"
      },
      {
        "key": "\\uhhhh",
        "description": "Match character with code hhhh (4 hex digits)"
      }
    ]
  },
  {
    "name": "Flags",
    "commands": [
      {
        "key": "g",
        "description": "Global search"
      },
      {
        "key": "i",
        "description": "Case-insensitive search"
      },
      {
        "key": "m",
        "description": "Multi-line search"
      },
      {
        "key": "y",
        "description": "\"sticky\" search match starting at current position in target string"
      }
    ]
  },
  {
    "name": "Groups",
    "commands": [
      {
        "key": "(x)",
        "description": "Match 'x' and remember the match"
      },
      {
        "key": "(?:x)",
        "description": "Match 'x' but do not remember the match"
      },
      {
        "key": "\\n",
        "description": "A back reference to the last substring matching the n parenthetical in the regex"
      }
    ]
  }
]