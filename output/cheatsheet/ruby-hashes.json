[
  {
    "name": "Basics I",
    "commands": [
      {
        "key": "h1==h2",
        "description": "Return true if h1 and h2 contain the same number of keys and if each key-value pair is equal"
      },
      {
        "key": "h[key]",
        "description": "Element Reference - retrieve the value object corresponding to the key object of hash h"
      },
      {
        "key": "h[key]=value",
        "description": "Set the value of key of hash h"
      },
      {
        "key": "h.clear",
        "description": "Remove all key-value pairs from hash h"
      },
      {
        "key": "h.empty?",
        "description": "Return true if hash h contains no key-value pairs"
      },
      {
        "key": "h.length",
        "description": "Return the number of key-value pairs in hash h (option 1)"
      }
    ]
  },
  {
    "name": "Enumerating I",
    "commands": [
      {
        "key": "h.delete_if",
        "description": "Delete every key-value pair from hash h for which block evaluates to true"
      },
      {
        "key": "h.each",
        "description": "Call block once for each key in hash h, passing the key-value pair as parameters (option 1)"
      },
      {
        "key": "h.each_key",
        "description": "Call block once for each key in hash h, passing the key as a parameter"
      },
      {
        "key": "h.each_value",
        "description": "Call block once for each key in hash h, passing the value as a parameter"
      },
      {
        "key": "h.keep_if",
        "description": "Delete every key-value pair from h for which block evaluates to false"
      }
    ]
  },
  {
    "name": "Enumerating II",
    "commands": [
      {
        "key": "h.any?",
        "description": "Pass each key, value of hash h to a block and return true if given block ever returns a value other than false or nil."
      },
      {
        "key": "h.each_pair",
        "description": "Call block once for each key in hash h, passing the key-value pair as parameters (option 2)"
      },
      {
        "key": "h.reject",
        "description": "Return a new hash consisting of entries for which the block returns false of hash h"
      },
      {
        "key": "h.reject!",
        "description": "Equivalent to delete_if, but return nil if no changes were made to hash h"
      },
      {
        "key": "h.select",
        "description": "Return a new hash consistent of entries for which the block returns true for hash h"
      },
      {
        "key": "h.select!",
        "description": "Equivalent to keep_if, but return true if no changes were made to hash h"
      }
    ]
  },
  {
    "name": "Keys I",
    "commands": [
      {
        "key": "h.delete(key)",
        "description": "Delete key-value pair and return value from hash h whose key is equal to key"
      },
      {
        "key": "h.has_key?(key)",
        "description": "Return true if the given key is present in hash h (option 1)"
      },
      {
        "key": "h.include?(key)",
        "description": "Return true if the given key is present in hash h (option 2)"
      },
      {
        "key": "h.key(value)",
        "description": "Return the key of an occurrence of a given value in hash h"
      },
      {
        "key": "h.key?(key)",
        "description": "Return true if the given key is present in hash h (option 3)"
      },
      {
        "key": "h.keys",
        "description": "Return a new array populated with the keys from hash h"
      },
      {
        "key": "h.member?(key)",
        "description": "Return true if the given key is present in hash h (option 4)"
      }
    ]
  },
  {
    "name": "Values I",
    "commands": [
      {
        "key": "h.default",
        "description": "Return default value of hash h"
      },
      {
        "key": "h.default=obj",
        "description": "Set default value of hash h to obj"
      },
      {
        "key": "h.default_proc",
        "description": "If hash h was invoked with a block, return that block"
      },
      {
        "key": "h.default_proc=block",
        "description": "Set default proc of hash h to be executed on each failed key lookup of h"
      },
      {
        "key": "h.fetch(key)",
        "description": "Return a value from hash h for key. Raise exception if key not found."
      },
      {
        "key": "h.has_value?(value)",
        "description": "Return true if the given value is present for some key in hash h (option 1)"
      },
      {
        "key": "h.value?(value)",
        "description": "Return true if the given value is present for some key in hash h (option 2)"
      },
      {
        "key": "h.values",
        "description": "Return a new array populated with the values from hash h"
      },
      {
        "key": "h.values_at(key1,key2)",
        "description": "Return an array containing the values associated with the given keys key1 and key2 of hash h"
      }
    ]
  },
  {
    "name": "General I",
    "commands": [
      {
        "key": "h1.eql?(h2)",
        "description": "Return true if h1 and h2 are both hashes with the same content"
      },
      {
        "key": "h.flatten",
        "description": "Return a new array that is a one-dimensional flattening of hash h"
      },
      {
        "key": "h.invert",
        "description": "Return a new hash created by using hash h's values as keys, and the keys as values"
      },
      {
        "key": "h1.merge(h2)",
        "description": "Return a new hash containing the contents of h1 and h2 (use an optional block to solve conflicts)"
      },
      {
        "key": "h1.merge!(h2)",
        "description": "Add the contents of h2 to h1 (use an optional block to solve conflicts)"
      },
      {
        "key": "h.shift",
        "description": "Remove a key-value pair from hash h and return it as the two item array [key,value]"
      },
      {
        "key": "h.size",
        "description": "Return the number of key-value pairs in hash h (option 2)"
      },
      {
        "key": "h.to_a",
        "description": "Convert hash h to a nested array of [key,value] arrays"
      }
    ]
  },
  {
    "name": "General II",
    "commands": [
      {
        "key": "h.assoc(obj)",
        "description": "Search through hash h comparing obj with each key and return the key-value pair as a two element array"
      },
      {
        "key": "h.compare_by_identity",
        "description": "Make hash h compare its keys by their identity (exact same objects)"
      },
      {
        "key": "h.compare_by_identity?",
        "description": "Return true if hash h will compare its keys by identity"
      },
      {
        "key": "h.hash",
        "description": "Compute a hash-code for hash h"
      },
      {
        "key": "h.to_s",
        "description": "Return the contents of hash h as string"
      },
      {
        "key": "h.rassoc(obj)",
        "description": "Search through the hash comparing obj with the values of hash h. Return first k-v pair (two element array) that matches"
      },
      {
        "key": "h.rehash",
        "description": "Rebuild hash h based on the current hash values for each key"
      }
    ]
  }
]