[
  {
    "name": "Basics I",
    "commands": [
      {
        "key": "str.length",
        "description": "Return length of string str"
      },
      {
        "key": "str[n]",
        "description": "Return nth character of string str"
      },
      {
        "key": "str.charAt(index)",
        "description": "Return character in string str at specified index"
      },
      {
        "key": "str.toLowerCase()",
        "description": "Convert string str to lower case"
      },
      {
        "key": "str.toUpperCase()",
        "description": "Convert string str to upper case"
      }
    ]
  },
  {
    "name": "General I",
    "commands": [
      {
        "key": "str.indexOf(substr)",
        "description": "Return first index within string str of substring substr"
      },
      {
        "key": "str.split(separator)",
        "description": "Split string str into an array of substrings separated by param separator"
      },
      {
        "key": "str.trim()",
        "description": "Trim whitespace from beginning and end of string str"
      },
      {
        "key": "str1<str2",
        "description": "Return true if str1 is less than str2"
      },
      {
        "key": "str1>str2",
        "description": "return true if str1 is greater than str2"
      }
    ]
  },
  {
    "name": "Experimental I",
    "commands": [
      {
        "key": "str.codePointAt(index)",
        "description": "Return non-negative int from string str that is the UTF-16 encoded code point at given index"
      },
      {
        "key": "str1.includes(str2)",
        "description": "Return true if str2 is found in string str1"
      },
      {
        "key": "str1.endsWith(str2)",
        "description": "Return true if string str1 ends with string str2"
      },
      {
        "key": "str.normalize()",
        "description": "Return Unicode Normalization Form of string str"
      },
      {
        "key": "str.repeat(int)",
        "description": "Return string repeated int times of string str"
      },
      {
        "key": "str1.startsWith(str2)",
        "description": "Return true if string str1 starts with str2"
      },
      {
        "key": "str[@@iterator]()",
        "description": "Return a new Iterator that iterates over the code points of string str, returning each code point as String value"
      }
    ]
  },
  {
    "name": "General II",
    "commands": [
      {
        "key": "str.charCodeAt(index)",
        "description": "Return number indicating Unicode value of char at given index of string str"
      },
      {
        "key": "str1.concat(str2)",
        "description": "Combine text of strings str1 and str2 and return a new string"
      },
      {
        "key": "str.lastIndexOf(substr)",
        "description": "Return last index within string str of substring substr"
      },
      {
        "key": "str.slice(start,end)",
        "description": "Extract a section of string str from start to end"
      },
      {
        "key": "str.substr(start,length)",
        "description": "Return characters in string str from start having length length"
      }
    ]
  },
  {
    "name": "General III",
    "commands": [
      {
        "key": "str.substring(index1,index2)",
        "description": "Return subset of string str between index1 and index2"
      },
      {
        "key": "str.toLocaleLowerCase()",
        "description": "Convert chars in string str to lower case while respecting current locale"
      },
      {
        "key": "str.toLocaleUpperCase()",
        "description": "Convert chars in string str to upper case while respecting current locale"
      },
      {
        "key": "str.trimLeft()",
        "description": "Trim whitespace from left side of string st"
      },
      {
        "key": "str.trimRight()",
        "description": "Trim whitespace form right side of string str"
      }
    ]
  },
  {
    "name": "General IV",
    "commands": [
      {
        "key": "str1.localeCompare(str2)",
        "description": "Return -1, 0, or 1 indicating if string str1 is less than, equal to, or greater than str2"
      },
      {
        "key": "str.match(regexp)",
        "description": "Match a regular expression regexp against string str"
      },
      {
        "key": "str1.replace(regexp,str2)",
        "description": "Replace matched regexp elements in string str1 with string str2"
      },
      {
        "key": "str.search(regexp)",
        "description": "Return position of search for a match between regexp and string str"
      }
    ]
  }
]